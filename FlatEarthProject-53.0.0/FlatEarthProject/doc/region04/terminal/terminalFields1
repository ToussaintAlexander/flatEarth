package com.external.merchant.terminal.model;

public class TerminalBean {

	private int TransactionCurrencyCode;			// Indicates the currency code of the transaction according to ISO 4217	Terminal	n 3
	private int TransactionCurrencyExponent;		// Identifies the decimal point position from the right of the transaction amount according to ISO 4217	Terminal	n 1
	private int TransactionReferenceCurrencyCode;		// Identifies the common currency used by the terminal	Terminal	binary 2
	private int TransactionReferenceCurrencyExponent;	// Identifies the decimal point position from the right of the terminal common currency	Terminal	n 1
	private int AccountType;				// Indicates the type of account selected on the terminal, coded as specified in Annex G	Terminal	n 2	 	1	1	
	private int AmountAuthorised1;				// (Binary)	Authorized amount of the transaction (excluding adjustments)	Terminal	binary	 	4	4	primitive	00010000
	private int CommandTemplate;				// Identifies the data field of a command message	Terminal	binary	 	var.	var.	primitive 
	private int AuthorisationResponseCode;			// (ARC)	Indicates the transaction disposition of the transaction received from the issuer for online authorizations.	Issuer/Terminal	an 2	 	2	2	primitive	
	private int TerminalVerificationResults;		// (TVR)	Status of the different functions from the Terminal perspective. The Terminal Verification Results is coded according to Annex C.5 of [EMV Book 3].	Terminal	binary	 	5	5	primitive
	private int TransactionCertificate;			// (TC) Hash Value	Result of a hash function specified in Book 2, Annex B3.1	Terminal	binary	 	20	20	primitive
	private int TransactionPersonalIdentificationNumber;	// (PIN) Data	Data entered by the cardholder for the purpose of the PIN verification	Terminal	binary	 	var.	var.	primitive
	private int TransactionDate;				// Local date that the transaction was authorized	Terminal	n 6 (YYMMDD)	 	3	3	primitive
	private int TransactionStatusInformation;		// (TSI)	Indicates the functions performed in a transaction	Terminal	binary	 	2	2	primitive	
	private int TransactionType;				// Indicates the type of financial transaction, represented by the first two digits of the ISO 8583:1987 Processing Code. The actual values to be used for the Transaction Type data element are defined by the relevant payment system	Terminal	n 2	 	1	1	primitive	Always '00'
	private int AcquirerIdentifier;				// Uniquely identifies the acquirer within each payment system	Terminal	n 6-11	 	6	11	primitive	 
	private int AmountAuthorised2;				// (Numeric)	Authorized amount of the transaction (excluding adjustments)	Terminal	n 12	 	6	6	primitive	000000010000
	private int AmountOther;				// (Numeric)	Secondary amount associated with the transaction representing a cash back amount	Terminal	n 12	 	6	6	primitive	Always '00 00 00 00 00 00'
	private int ApplicationIdentifier;			// (AID), Terminal	Identifies the application as described in ISO/IEC 7816-5	Terminal	binary	 	5	16	primitive	 
	private int ApplicationVersionNumber;			// Version number assigned by the payment system for the Kernel application	Terminal	binary	 	2	2	primitive
	private int MerchantCategoryCode;			// (MCC)	Classifies the type of business being done by the merchant, represented according to ISO 8583:1993 for Card Acceptor Business Code	Terminal	n 4	 	2	2	primitive
	private int MerchantIdentifier;				// When concatenated with the Acquirer Identifier, uniquely identifies a given merchant	Terminal	ans 15	 	15	15	primitive
	private int TerminalCountryCode;			// Indicates the country of the terminal, represented according to ISO 3166	Terminal	n 3	 	2	2	primitive
	private int TerminalFloorLimit;				// Indicates the floor limit in the terminal in conjunction with the AID	Terminal	binary 32	 	4	4	primitive
	private int TerminalIdentification;			// Designates the unique location of a Terminal at a merchant	Terminal	an 8	 	8	8	primitive
	private int TerminalRiskManagementData;			// Application-specific value used by the card for risk management purposes	Terminal	binary	 	1	8	primitive	
	private int InterfaceDeviceSerialNumber;		// (IFD) Unique and permanent serial number assigned to the IFD by the manufacturer	Terminal	an 8	 	8	8	primitive	 
	private int TransactionTime;				// Local time at which the transaction was performed.	Terminal	n 6 (HHMMSS)	 	3	3	constructed
	private int CertificationAuthorityPublicKeyIndex;	// (PKI)	Identifies the Certificate Authority's public key in conjunction with the RID for use in offline static and dynamic data authentication.	Terminal	binary 8	 	1	1	constructed	 
	private int TerminalCapabilities;			// Indicates the card data input, CVM, and security capabilities of the Terminal and Reader. The CVM capability (Byte 2) is instantiated with values depending on the transaction amount. The Terminal Capabilities is coded according to Annex A.2 of [EMV Book 4].	Terminal	binary	 	3	3	constructed
	private int CardholderVerificationMethodResults;	// (CVM) Indicates the results of the last CVM performed	Terminal	binary	 	3	3	constructed	 
	private int TerminalType;				// Indicates the environment of the terminal, its communications capability, and its operational control	Terminal	n 2	 	1	1	constructed	 
	private int UnpredictableNumber;			// (UN)	Value to provide variability and uniqueness to the generation of a cryptogram	Terminal	binary	 	4	4	constructed	
	private int PointofServiceEntryMode;			// (POS) Indicates the method by which the PAN was entered, according to the first two digits of the ISO 8583:1987 POS Entry Mode	Terminal	n 2	 	1	1	constructed	 
	private int AmountReferenceCurrency;			// (Binary)	Authorized amount expressed in the reference currency	Terminal	binary	 	4	4	constructed	
	private int CurrencyCodeTransactionReferenceCode;	// defining the common currency used by the terminal in case the Transaction Currency Code is different from the Application Currency Code	Terminal	n 3	 	2	2	constructed	 
	private int CurrencyExponentTransactionReference;	// Indicates the implied position of the decimal point from the right of the transaction amount, with the Transaction Reference Currency Code represented according to ISO 4217	Terminal	n 1	 	1	1	constructed	 
	private int AdditionalTerminalCapabilities;		// (ATC)	Indicates the data input and output capabilities of the Terminal and Reader. The Additional Terminal Capabilities is coded according to Annex A.3 of [EMV Book 4].	Terminal	binary	 	5	5	primitive
	private int TransactionSequenceCounter;			// Counter maintained by the terminal that is incremented by one for each transaction	Terminal	n 4-8	 	2	4	primitive
	private int MerchantNameandLocation;			// Indicates the name and location of the merchant	Terminal	ans	 	var.	var.	primitive
	private int ApplicationProgramIdentifier;		// (Program ID)	Proprietary data element used by the device during Dynamic Reader Limit processing to determine the Reader Limit Set to apply for the transaction. EMV mode readers that support Dynamic Reader Limits (DRL) functionality support four or more Application Program Identifiers, each corresponding to a Reader Limit Set.	Terminal	binary	 	1	16
	private int IssuerScriptResults;			// Indicates the results of Issuer Script processing. When the reader/terminal transmits this data element to the acquirer, in this version of Kernel 3, it is acceptable that only byte 1 is transmitted, although it is preferable for all five bytes to be transmitted.	Terminal	binary	 	var.	var
	private int TerminalTransactionQualifiers;		// (TTQ)	Indicates reader capabilities, requirements, and preferences to the card. TTQ byte 2 bits 8-7 are transient values, and reset to zero at the beginning of the transaction. All other TTQ bits are static values, and not modified based on transaction conditions. TTQ byte 3 bit 7 shall be set by the acquirer-merchant to 1b.	Terminal	binary 32	 	4	4
	private int Kernel4ReaderCapabilities;			// A proprietary data element with bits 8, 7, and 4 only used to indicate a terminal's capability to support Kernel 4 mag-stripe or EMV contactless. This data element is OR'd with Terminal Type, Tag '9F35', resulting in a modified Tag '9F35', which is passed to the card when requested.	Terminal	n 2	 	1	1	 
	private int FormFactorIndicator;			// (qVSDC)	Indicates the form factor of the consumer payment device and the type of contactless interface over which the transaction was conducted. This information is made available to the issuer host.	Card/Terminal	binary 32	 	4	4
	private int VLPTerminalSupportIndicator;		// If present indicates offline and/or online support. If absent indicates online only support	Terminal	n 1	 	1	1
	private int VLPTerminalTransactionLimit;		// Terminal	H	 	 
	private int ParentENCTerminalActionCode;		// Default	Card/Terminal	H	 
	private int TerminalActionCodeDecline;			// Terminal	H

	public int getTransactionCurrencyCode() {
		return TransactionCurrencyCode;
	}
	public void setTransactionCurrencyCode(int transactionCurrencyCode) {
		TransactionCurrencyCode = transactionCurrencyCode;
	}
	public int getTransactionCurrencyExponent() {
		return TransactionCurrencyExponent;
	}
	public void setTransactionCurrencyExponent(int transactionCurrencyExponent) {
		TransactionCurrencyExponent = transactionCurrencyExponent;
	}
	public int getTransactionReferenceCurrencyCode() {
		return TransactionReferenceCurrencyCode;
	}
	public void setTransactionReferenceCurrencyCode(int transactionReferenceCurrencyCode) {
		TransactionReferenceCurrencyCode = transactionReferenceCurrencyCode;
	}
	public int getTransactionReferenceCurrencyExponent() {
		return TransactionReferenceCurrencyExponent;
	}
	public void setTransactionReferenceCurrencyExponent(int transactionReferenceCurrencyExponent) {
		TransactionReferenceCurrencyExponent = transactionReferenceCurrencyExponent;
	}
	public int getAccountType() {
		return AccountType;
	}
	public void setAccountType(int accountType) {
		AccountType = accountType;
	}
	public int getAmountAuthorised1() {
		return AmountAuthorised1;
	}
	public void setAmountAuthorised1(int amountAuthorised1) {
		AmountAuthorised1 = amountAuthorised1;
	}
	public int getCommandTemplate() {
		return CommandTemplate;
	}
	public void setCommandTemplate(int commandTemplate) {
		CommandTemplate = commandTemplate;
	}
	public int getAuthorisationResponseCode() {
		return AuthorisationResponseCode;
	}
	public void setAuthorisationResponseCode(int authorisationResponseCode) {
		AuthorisationResponseCode = authorisationResponseCode;
	}
	public int getTerminalVerificationResults() {
		return TerminalVerificationResults;
	}
	public void setTerminalVerificationResults(int terminalVerificationResults) {
		TerminalVerificationResults = terminalVerificationResults;
	}
	public int getTransactionCertificate() {
		return TransactionCertificate;
	}
	public void setTransactionCertificate(int transactionCertificate) {
		TransactionCertificate = transactionCertificate;
	}
	public int getTransactionPersonalIdentificationNumber() {
		return TransactionPersonalIdentificationNumber;
	}
	public void setTransactionPersonalIdentificationNumber(int transactionPersonalIdentificationNumber) {
		TransactionPersonalIdentificationNumber = transactionPersonalIdentificationNumber;
	}
	public int getTransactionDate() {
		return TransactionDate;
	}
	public void setTransactionDate(int transactionDate) {
		TransactionDate = transactionDate;
	}
	public int getTransactionStatusInformation() {
		return TransactionStatusInformation;
	}
	public void setTransactionStatusInformation(int transactionStatusInformation) {
		TransactionStatusInformation = transactionStatusInformation;
	}
	public int getTransactionType() {
		return TransactionType;
	}
	public void setTransactionType(int transactionType) {
		TransactionType = transactionType;
	}
	public int getAcquirerIdentifier() {
		return AcquirerIdentifier;
	}
	public void setAcquirerIdentifier(int acquirerIdentifier) {
		AcquirerIdentifier = acquirerIdentifier;
	}
	public int getAmountAuthorised2() {
		return AmountAuthorised2;
	}
	public void setAmountAuthorised2(int amountAuthorised2) {
		AmountAuthorised2 = amountAuthorised2;
	}
	public int getAmountOther() {
		return AmountOther;
	}
	public void setAmountOther(int amountOther) {
		AmountOther = amountOther;
	}
	public int getApplicationIdentifier() {
		return ApplicationIdentifier;
	}
	public void setApplicationIdentifier(int applicationIdentifier) {
		ApplicationIdentifier = applicationIdentifier;
	}
	public int getApplicationVersionNumber() {
		return ApplicationVersionNumber;
	}
	public void setApplicationVersionNumber(int applicationVersionNumber) {
		ApplicationVersionNumber = applicationVersionNumber;
	}
	public int getMerchantCategoryCode() {
		return MerchantCategoryCode;
	}
	public void setMerchantCategoryCode(int merchantCategoryCode) {
		MerchantCategoryCode = merchantCategoryCode;
	}
	public int getMerchantIdentifier() {
		return MerchantIdentifier;
	}
	public void setMerchantIdentifier(int merchantIdentifier) {
		MerchantIdentifier = merchantIdentifier;
	}
	public int getTerminalCountryCode() {
		return TerminalCountryCode;
	}
	public void setTerminalCountryCode(int terminalCountryCode) {
		TerminalCountryCode = terminalCountryCode;
	}
	public int getTerminalFloorLimit() {
		return TerminalFloorLimit;
	}
	public void setTerminalFloorLimit(int terminalFloorLimit) {
		TerminalFloorLimit = terminalFloorLimit;
	}
	public int getTerminalIdentification() {
		return TerminalIdentification;
	}
	public void setTerminalIdentification(int terminalIdentification) {
		TerminalIdentification = terminalIdentification;
	}
	public int getTerminalRiskManagementData() {
		return TerminalRiskManagementData;
	}
	public void setTerminalRiskManagementData(int terminalRiskManagementData) {
		TerminalRiskManagementData = terminalRiskManagementData;
	}
	public int getInterfaceDeviceSerialNumber() {
		return InterfaceDeviceSerialNumber;
	}
	public void setInterfaceDeviceSerialNumber(int interfaceDeviceSerialNumber) {
		InterfaceDeviceSerialNumber = interfaceDeviceSerialNumber;
	}
	public int getTransactionTime() {
		return TransactionTime;
	}
	public void setTransactionTime(int transactionTime) {
		TransactionTime = transactionTime;
	}
	public int getCertificationAuthorityPublicKeyIndex() {
		return CertificationAuthorityPublicKeyIndex;
	}
	public void setCertificationAuthorityPublicKeyIndex(int certificationAuthorityPublicKeyIndex) {
		CertificationAuthorityPublicKeyIndex = certificationAuthorityPublicKeyIndex;
	}
	public int getTerminalCapabilities() {
		return TerminalCapabilities;
	}
	public void setTerminalCapabilities(int terminalCapabilities) {
		TerminalCapabilities = terminalCapabilities;
	}
	public int getCardholderVerificationMethodResults() {
		return CardholderVerificationMethodResults;
	}
	public void setCardholderVerificationMethodResults(int cardholderVerificationMethodResults) {
		CardholderVerificationMethodResults = cardholderVerificationMethodResults;
	}
	public int getTerminalType() {
		return TerminalType;
	}
	public void setTerminalType(int terminalType) {
		TerminalType = terminalType;
	}
	public int getUnpredictableNumber() {
		return UnpredictableNumber;
	}
	public void setUnpredictableNumber(int unpredictableNumber) {
		UnpredictableNumber = unpredictableNumber;
	}
	public int getPointofServiceEntryMode() {
		return PointofServiceEntryMode;
	}
	public void setPointofServiceEntryMode(int pointofServiceEntryMode) {
		PointofServiceEntryMode = pointofServiceEntryMode;
	}
	public int getAmountReferenceCurrency() {
		return AmountReferenceCurrency;
	}
	public void setAmountReferenceCurrency(int amountReferenceCurrency) {
		AmountReferenceCurrency = amountReferenceCurrency;
	}
	public int getCurrencyCodeTransactionReferenceCode() {
		return CurrencyCodeTransactionReferenceCode;
	}
	public void setCurrencyCodeTransactionReferenceCode(int currencyCodeTransactionReferenceCode) {
		CurrencyCodeTransactionReferenceCode = currencyCodeTransactionReferenceCode;
	}
	public int getCurrencyExponentTransactionReference() {
		return CurrencyExponentTransactionReference;
	}
	public void setCurrencyExponentTransactionReference(int currencyExponentTransactionReference) {
		CurrencyExponentTransactionReference = currencyExponentTransactionReference;
	}
	public int getAdditionalTerminalCapabilities() {
		return AdditionalTerminalCapabilities;
	}
	public void setAdditionalTerminalCapabilities(int additionalTerminalCapabilities) {
		AdditionalTerminalCapabilities = additionalTerminalCapabilities;
	}
	public int getTransactionSequenceCounter() {
		return TransactionSequenceCounter;
	}
	public void setTransactionSequenceCounter(int transactionSequenceCounter) {
		TransactionSequenceCounter = transactionSequenceCounter;
	}
	public int getMerchantNameandLocation() {
		return MerchantNameandLocation;
	}
	public void setMerchantNameandLocation(int merchantNameandLocation) {
		MerchantNameandLocation = merchantNameandLocation;
	}
	public int getApplicationProgramIdentifier() {
		return ApplicationProgramIdentifier;
	}
	public void setApplicationProgramIdentifier(int applicationProgramIdentifier) {
		ApplicationProgramIdentifier = applicationProgramIdentifier;
	}
	public int getIssuerScriptResults() {
		return IssuerScriptResults;
	}
	public void setIssuerScriptResults(int issuerScriptResults) {
		IssuerScriptResults = issuerScriptResults;
	}
	public int getTerminalTransactionQualifiers() {
		return TerminalTransactionQualifiers;
	}
	public void setTerminalTransactionQualifiers(int terminalTransactionQualifiers) {
		TerminalTransactionQualifiers = terminalTransactionQualifiers;
	}
	public int getKernel4ReaderCapabilities() {
		return Kernel4ReaderCapabilities;
	}
	public void setKernel4ReaderCapabilities(int kernel4ReaderCapabilities) {
		Kernel4ReaderCapabilities = kernel4ReaderCapabilities;
	}
	public int getFormFactorIndicator() {
		return FormFactorIndicator;
	}
	public void setFormFactorIndicator(int formFactorIndicator) {
		FormFactorIndicator = formFactorIndicator;
	}
	public int getVLPTerminalSupportIndicator() {
		return VLPTerminalSupportIndicator;
	}
	public void setVLPTerminalSupportIndicator(int vLPTerminalSupportIndicator) {
		VLPTerminalSupportIndicator = vLPTerminalSupportIndicator;
	}
	public int getVLPTerminalTransactionLimit() {
		return VLPTerminalTransactionLimit;
	}
	public void setVLPTerminalTransactionLimit(int vLPTerminalTransactionLimit) {
		VLPTerminalTransactionLimit = vLPTerminalTransactionLimit;
	}
	public int getParentENCTerminalActionCode() {
		return ParentENCTerminalActionCode;
	}
	public void setParentENCTerminalActionCode(int parentENCTerminalActionCode) {
		ParentENCTerminalActionCode = parentENCTerminalActionCode;
	}
	public int getTerminalActionCodeDecline() {
		return TerminalActionCodeDecline;
	}
	public void setTerminalActionCodeDecline(int terminalActionCodeDecline) {
		TerminalActionCodeDecline = terminalActionCodeDecline;
	}
	
}