package com.system.security.authentication.password.service;

import java.io.IOException;
import java.sql.Timestamp;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.system.configuration.constants.Screen;
import com.system.language.expression.model.ExpressionBean;
import com.system.language.logger.service.LogEvent;
import com.system.language.expression.dao.ExpressionDao;
import com.system.language.expression.dao.ExpressionDaoImpl;
import com.system.security.authentication.password.dao.PasswordDao;
import com.system.security.authentication.password.dao.PasswordDaoImpl;
import com.system.security.authentication.password.model.PasswordBean;

import static com.system.configuration.constants.Table.*;

public class PasswordServlet extends HttpServlet {
	
	private static final long serialVersionUID = -1262211178220919921L;
	
	private String 			firstName;			// VARCHAR (20)
	private String 			lastName;			// VARCHAR (20)
	private int 			id;
	private int 			groupId;			// NUMBER  (03)	100-999		---> GROUP TABLE
	private int 			userId;				// NUMBER  (03)	100-999		---> SHADOW TABLE
	private int				seq;				// NUMBER  (03)	000-999
	private String 			username;			// VARCHAR (08)
	private String 			password;			// VARCHAR (08)
	private int 			passwordType;		// VARCHAR (04)				---> PERM, TEMP	---> Changed String to int
	private String			domain;				// VARCHAR (20)
	private int				rememberMe;			
	private int 			accountStatus;		// ACTIVE, INACTIVE, FROZEN, DELETED		---> Changed String to int
	private Timestamp		lastAccess;			// TIMESTAMP
	private Timestamp 		passwordChange;		// TIMESTAMP
	private int 			passwordAttempts;	// 0-9
	private String 			computerName;		// PB288L7
	private String 			createUser;			// VARCHAR (08) 
	private Timestamp 		createTimestamp;	// TIMESTAMP
	private String 			modifyUser;			// VARCHAR (08)
	private Timestamp 		modifyTimestamp;	// TIMESTAMP
	
	private static boolean 	passwordReady;
	
	protected LogEvent 		myLog;
	public String 			className = this.getClass().getName();
	
	protected Class<? extends HttpServlet> myCls;
	
	/***********************************************************************************
	 ***********************************************************************************/
	public PasswordBean formatPasswordBean (HttpServletRequest request) {
		
		System.out.println("PasswordServlet ---> Entering formatPasswordBean ()");
		
		firstName 			= request.getParameter("firstName");
		lastName 			= request.getParameter("lastName");
		
		id 					= Integer.valueOf(request.getParameter("id"));
		
		groupId 			= Integer.valueOf(request.getParameter("groupId"));
		userId 				= Integer.valueOf(request.getParameter("userId"	));
		seq 				= Integer.valueOf(request.getParameter("sequence"));
		
		username 			= request.getParameter("userName");
		password 			= request.getParameter("password");
		passwordType		= Integer.valueOf(request.getParameter("passwordType"));
		domain				= request.getParameter("domain");
		
//		if(request.getParameter("rememberMe").equalsIgnoreCase("Yes")) {
//			rememberMe = true;
//		} else {
//			rememberMe = false;
//		}
		
		rememberMe			= Integer.valueOf(request.getParameter("rememberMe"));
		
		accountStatus 		= Integer.valueOf(request.getParameter("accountStatus"	));
		lastAccess			= Timestamp.valueOf(request.getParameter("lastAccess"	 ));
		passwordChange		= Timestamp.valueOf(request.getParameter("passwordChange"));
		passwordAttempts	= Integer.valueOf(request.getParameter("passwordAttempts"));
		computerName 		= request.getParameter("computerName"	);

		createUser			= request.getParameter("createUser");
		createTimestamp 	= Timestamp.valueOf(request.getParameter("createTimestamp"));
		modifyUser			= request.getParameter("modifyUser");
		modifyTimestamp 	= Timestamp.valueOf(request.getParameter("modifyTimestamp"));
		
		PasswordBean passwordBean = new PasswordBean (
													   id
													 , groupId 				 
													 , userId 					 
													 , seq 				 
													 , username 			 
													 , password 			 
													 , domain 				 
													 , rememberMe 			 
													 , passwordType 		 
													 , firstName 			 
													 , lastName 			 
													 , accountStatus 		 
													 , lastAccess 		 
													 , passwordChange 	 
													 , passwordAttempts 		 
													 , computerName 		 
													 , createUser 			 
													 , createTimestamp 	 
													 , modifyUser 			 
													 , modifyTimestamp 	 			
													);
		
		return passwordBean;
	} 
	
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkPasswordBeanFieldFormat(PasswordBean passwordBean) {
		
		if ((checkGroupIdFormat			(passwordBean))
		&&  (checkUserIdFormat 			(passwordBean))
		&&  (checkSequenceFormat 		(passwordBean))
		
		&&  (checkUsernameFormat 		(passwordBean))
		&&  (checkPasswordFormat 		(passwordBean))
		
		&&  (checkDomainFormat 			(passwordBean))
		&&  (checkRememberMeFormat		(passwordBean))
		&&  (checkPasswordTypeFormat	(passwordBean))
		
		&&  (checkFirstNameFormat 		(passwordBean))
		&&  (checkLastNameFormat 		(passwordBean))
		
		&&  (checkAccountStatusFormat 	(passwordBean))
		&&  (checkLastAccessFormat 		(passwordBean))
		&&  (checkPasswordChangeFormat 	(passwordBean))
		&&  (checkPasswordAttemptsFormat(passwordBean))
		&&  (checkComputerNameFormat 	(passwordBean))
		
		&&  (checkCreateUserFormat 		(passwordBean))
		&&  (checkCreateTimestampFormat (passwordBean))
		&&  (checkModifyUserFormat 		(passwordBean))
		&&  (checkModifyTimestampFormat (passwordBean))) {
			
			return true;
			
		} else {
			
			return false;
		}
	}
	
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkGroupIdFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(GROUP_ID_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,String.valueOf(passwordBean.getGroupId()));
	}
		
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkUserIdFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(USER_ID_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,String.valueOf(passwordBean.getUserId()));
	}
	
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkSequenceFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(SEQUENCE_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,String.valueOf(passwordBean.getSeq()));
	}
	
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkUsernameFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(GENERIC_SCREEN);
		expressionBean.setFieldName(USERNAME_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,passwordBean.getUsername());
	}
	
	/***********************************************************************************
	 * 
	 * (					# Start of group
	 *		(?=.*\d)		#   must contains one digit from 0-9
  	 *		(?=.*[a-z])		#   must contains one lowercase characters
  	 *		(?=.*[A-Z])		#   must contains one uppercase characters
  	 *		(?=.*[@#$%])	#   must contains one special symbols in the list "@#$%"
     *          	 .		#     match anything with previous condition checking
     *           {6,20}		#        length at least 6 characters and maximum of 20	
	 * )					# End of group
	 *
	 ***********************************************************************************/
	public boolean checkPasswordFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(GENERIC_SCREEN);
		expressionBean.setFieldName(PASSWORD_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,passwordBean.getPassword());
	}
	
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkDomainFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(DOMAIN_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,passwordBean.getDomain());
	}
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkRememberMeFormat (PasswordBean passwordBean) {
		
		String rememberMeStr = "";										/*** KLUDGE ***/
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(REMEMBER_ME_FIELD);
		
//		if(passwordBean.isRememberMe()) {
//			rememberMeStr = "Yes";
//		} else {
//			rememberMeStr = "No";
//		}
		
		return expressionHelpDao.validateScreenField(expressionBean
													,rememberMeStr.toUpperCase());
	}
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkPasswordTypeFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(PASSWORD_TYPE_FIELD);	// String to int
		
		return expressionHelpDao.validateScreenField(expressionBean
													,String.valueOf(passwordBean.getPasswordType()));
	}
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkFirstNameFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(FIRST_NAME_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,passwordBean.getFirstName());
	}
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkLastNameFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(LAST_NAME_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,passwordBean.getLastName());
	}
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkAccountStatusFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(ACCOUNT_STATUS_FIELD);	// String to int
		
		return expressionHelpDao.validateScreenField(expressionBean
													,String.valueOf(passwordBean.getAccountStatus()));
	}
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkLastAccessFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(LAST_ACCESS_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,passwordBean.getLastAccess().toString().substring(0,19));
	}
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkPasswordChangeFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(PASSWORD_CHANGE_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,passwordBean.getPasswordChange().toString().substring(0,19));
	}
	
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkPasswordAttemptsFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(PASSWORD_ATTEMPTS_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,String.valueOf(passwordBean.getPasswordAttempts()));
	}
	
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkComputerNameFormat (PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(PASSWORD_SCREEN);
		expressionBean.setFieldName(COMPUTER_NAME_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,passwordBean.getComputerName());
	}
	
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkCreateUserFormat(PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(GENERIC_SCREEN);
		expressionBean.setFieldName(CREATE_USER_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,passwordBean.getCreateUser());
	}
	
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkCreateTimestampFormat(PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(GENERIC_SCREEN);
		expressionBean.setFieldName(CREATE_TIMESTAMP_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,passwordBean.getCreateTimestamp().toString().substring(0,19));
	}
	
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkModifyUserFormat(PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(GENERIC_SCREEN);
		expressionBean.setFieldName(MODIFY_USER_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,passwordBean.getModifyUser());
	}
	
	/***********************************************************************************
	 ***********************************************************************************/
	public boolean checkModifyTimestampFormat(PasswordBean passwordBean) {
		
		ExpressionDao expressionHelpDao = new ExpressionDaoImpl();
		
		ExpressionBean expressionBean = new ExpressionBean();
		
		expressionBean.setScreenName(GENERIC_SCREEN);
		expressionBean.setFieldName(MODIFY_TIMESTAMP_FIELD);
		
		return expressionHelpDao.validateScreenField(expressionBean
													,passwordBean.getModifyTimestamp().toString().substring(0,19));
	}

	/***********************************************************************************
	 ***********************************************************************************/	
	public void performDatabaseAction (HttpServletRequest 	request
			  						  ,PasswordBean 		passwordBean) {

		boolean result = false;

		PasswordDao passwordDao = new PasswordDaoImpl();

		int intValue = Screen.getButtonCode (request.getParameter("submitAction"));

		switch (intValue) {

		case ACTIVATE_KEY:
			
			String username = passwordBean.getUsername();
			String password = passwordBean.getPassword();
			String domain 	= passwordBean.getDomain();
			
			result = passwordDao.selectPasswordById(username,password,domain) != null  ? true: false;
			break;

		case INSERT_RECORD:
			result = passwordDao.insert(passwordBean);
			break;

		case UPDATE_RECORD:
			result = passwordDao.update(passwordBean);
			break;

		case DELETE_RECORD:
			
			int groupId 	= passwordBean.getGroupId();
			int userId 		= passwordBean.getUserId();
			int sequence 	= passwordBean.getSeq();
			
			result = passwordDao.delete(groupId,userId,sequence);
			break;

		default:
			System.out.println("PasswordServlet ---> Button Not Depressed");
			result = false;
			break;
		}

		passwordReady = result;
	}
	
	/***********************************************************************************
	 ***********************************************************************************/	
	public void redisplayPasswordForm (HttpServletRequest 	request
									  ,HttpServletResponse 	response) {
		
		System.out.println("PasswordServlet ---> Entering redisplayPasswordForm()");
		
		ServletContext sc = this.getServletContext();

		RequestDispatcher rd = sc.getRequestDispatcher("/password.jsp");

		try {
			
			rd.forward(request, response);
			
		} catch (ServletException e) {
			
			System.out.println("PasswordServlet ---> redisplayPasswordForm(request,response) Failure");
			e.printStackTrace();
			
		} catch (IOException e) {
			
			System.out.println("PasswordServlet ---> redisplayPasswordForm(request,response) Failure");
			e.printStackTrace();
		}
	}
	
	/***********************************************************************************
	 ***********************************************************************************/	
	public void showPasswordForm (HttpServletRequest 	request
								 ,HttpServletResponse 	response) {
		
		System.out.println("PasswordServlet ---> Entering showPasswordForm()");
		
		ServletContext sc = this.getServletContext();

		RequestDispatcher rd = sc.getRequestDispatcher("/displayPasswordTable.jsp");

		try {
			
			rd.include(request, response);
			
		} catch (ServletException e) {
			
			System.out.println("PasswordServlet ---> showPasswordForm() Failure");
			e.printStackTrace();
			
		} catch (IOException e) {
			
			System.out.println("PasswordServlet ---> showPasswordForm() Failure");
			e.printStackTrace();
		}
	}
	
	/***********************************************************************************
	 ***********************************************************************************/
   public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {

	  System.out.println("PasswordServlet ---> Entering doGet()");
	  
	  PasswordBean passwordBean = new PasswordServlet().formatPasswordBean(request);
	  
	  if ((passwordBean != null )
	  && new PasswordServlet().checkPasswordBeanFieldFormat(passwordBean)) {
		  performDatabaseAction (request, passwordBean);
	  } else {
		  redisplayPasswordForm (request,response);
		  return;
	  }
	  
	  
	  if (passwordReady)
		  showPasswordForm (request,response);
	  else
		  redisplayPasswordForm (request,response);
    }
}